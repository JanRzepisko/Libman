// <auto-generated />
using System;
using Library.Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Library.Infrastructure.Migrations
{
    [DbContext(typeof(LibraryDataContext))]
    [Migration("20230210184830_INIT4")]
    partial class INIT4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Library.Domain.Entities.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("LibraryId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.ToTable("_Admins");
                });

            modelBuilder.Entity("Library.Domain.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("LibraryId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("RentalId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.ToTable("_Books");
                });

            modelBuilder.Entity("Library.Domain.Entities.Library", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("_Libraries");
                });

            modelBuilder.Entity("Library.Domain.Entities.Rental", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BookId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("LibraryId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("RentalDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("BookId")
                        .IsUnique();

                    b.HasIndex("LibraryId");

                    b.HasIndex("UserId");

                    b.ToTable("_Rentals");
                });

            modelBuilder.Entity("Library.Domain.Entities.RentalHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BookId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("LibraryId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("RentalDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("LibraryId");

                    b.HasIndex("UserId");

                    b.ToTable("_RentalsHistory");
                });

            modelBuilder.Entity("Library.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("LibraryId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.ToTable("_Users");
                });

            modelBuilder.Entity("Library.Domain.Entities.Admin", b =>
                {
                    b.HasOne("Library.Domain.Entities.Library", "Library")
                        .WithMany("Admins")
                        .HasForeignKey("LibraryId");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("Library.Domain.Entities.Book", b =>
                {
                    b.HasOne("Library.Domain.Entities.Library", "Library")
                        .WithMany("Books")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");
                });

            modelBuilder.Entity("Library.Domain.Entities.Library", b =>
                {
                    b.OwnsOne("Library.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("LibraryId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("LibraryId");

                            b1.ToTable("_Libraries");

                            b1.WithOwner()
                                .HasForeignKey("LibraryId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("Library.Domain.Entities.Rental", b =>
                {
                    b.HasOne("Library.Domain.Entities.Book", "Book")
                        .WithOne("Rental")
                        .HasForeignKey("Library.Domain.Entities.Rental", "BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Domain.Entities.Library", "Library")
                        .WithMany("Rentals")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Domain.Entities.User", "User")
                        .WithMany("ActiveRelant")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Library");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Library.Domain.Entities.RentalHistory", b =>
                {
                    b.HasOne("Library.Domain.Entities.Book", "Book")
                        .WithMany("RentalsHistory")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Domain.Entities.Library", "Library")
                        .WithMany("RentalsHistory")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Domain.Entities.User", "User")
                        .WithMany("RelantsHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Library");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Library.Domain.Entities.User", b =>
                {
                    b.HasOne("Library.Domain.Entities.Library", "Library")
                        .WithMany("Users")
                        .HasForeignKey("LibraryId");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("Library.Domain.Entities.Book", b =>
                {
                    b.Navigation("Rental");

                    b.Navigation("RentalsHistory");
                });

            modelBuilder.Entity("Library.Domain.Entities.Library", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("Books");

                    b.Navigation("Rentals");

                    b.Navigation("RentalsHistory");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Library.Domain.Entities.User", b =>
                {
                    b.Navigation("ActiveRelant");

                    b.Navigation("RelantsHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
